/**
 * Precisely APIs
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * OpenAPI spec version: 11.5.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.precisely.apis;

import com.precisely.ApiCallback;
import com.precisely.ApiClient;
import com.precisely.ApiException;
import com.precisely.ApiResponse;
import com.precisely.Configuration;
import com.precisely.Pair;
import com.precisely.ProgressRequestBody;
import com.precisely.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.precisely.apis.model.Demographics;
import com.precisely.apis.model.DemographicsAdvancedRequest;
import com.precisely.apis.model.Segmentation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DemographicsServiceApi {
    private ApiClient apiClient;

    public DemographicsServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DemographicsServiceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getDemographicsAdvanced */
    private com.squareup.okhttp.Call getDemographicsAdvancedCall(DemographicsAdvancedRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        

        // create path and map variables
        String localVarPath = "/demographics-segmentation/v1/advanced/demographics".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Demographics Advanced Endpoint
     * Demographics Advanced Endpoint will return the aggregated values of the selected demographics variables of the regions falling inside a user provided geometry or travel time/distance boundaries. All the intersecting demographic boundaries will be snapped completely, and user will have option to request these boundaries in response.  
     * @param body  (optional)
     * @return Demographics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Demographics getDemographicsAdvanced(DemographicsAdvancedRequest body) throws ApiException {
        ApiResponse<Demographics> resp = getDemographicsAdvancedWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Demographics Advanced Endpoint
     * Demographics Advanced Endpoint will return the aggregated values of the selected demographics variables of the regions falling inside a user provided geometry or travel time/distance boundaries. All the intersecting demographic boundaries will be snapped completely, and user will have option to request these boundaries in response.  
     * @param body  (optional)
     * @return ApiResponse&lt;Demographics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Demographics> getDemographicsAdvancedWithHttpInfo(DemographicsAdvancedRequest body) throws ApiException {
        com.squareup.okhttp.Call call = getDemographicsAdvancedCall(body, null, null);
        Type localVarReturnType = new TypeToken<Demographics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Demographics Advanced Endpoint (asynchronously)
     * Demographics Advanced Endpoint will return the aggregated values of the selected demographics variables of the regions falling inside a user provided geometry or travel time/distance boundaries. All the intersecting demographic boundaries will be snapped completely, and user will have option to request these boundaries in response.  
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDemographicsAdvancedAsync(DemographicsAdvancedRequest body, final ApiCallback<Demographics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDemographicsAdvancedCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Demographics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getDemographicsBasic */
    private com.squareup.okhttp.Call getDemographicsBasicCall(String address, String longitude, String latitude, String searchRadius, String searchRadiusUnit, String travelTime, String travelTimeUnit, String travelDistance, String travelDistanceUnit, String travelMode, String country, String profile, String filter, String includeGeometry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/demographics-segmentation/v1/basic/demographics".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (address != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "address", address));
        if (longitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "longitude", longitude));
        if (latitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "latitude", latitude));
        if (searchRadius != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "searchRadius", searchRadius));
        if (searchRadiusUnit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "searchRadiusUnit", searchRadiusUnit));
        if (travelTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "travelTime", travelTime));
        if (travelTimeUnit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "travelTimeUnit", travelTimeUnit));
        if (travelDistance != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "travelDistance", travelDistance));
        if (travelDistanceUnit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "travelDistanceUnit", travelDistanceUnit));
        if (travelMode != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "travelMode", travelMode));
        if (country != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "country", country));
        if (profile != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "profile", profile));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (includeGeometry != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "includeGeometry", includeGeometry));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Demographics Basic
     * Demographics Basic Endpoint will return the aggregated values of the selected demographics variables of the regions falling inside the search radius. All the intersecting demographic boundaries will be snapped completely and user will have option to request these boundaries in response.  
     * @param address Address to be searched (optional)
     * @param longitude Longitude of the location (optional)
     * @param latitude Latitude of the location (optional)
     * @param searchRadius Radius within which demographics details are required. Max. value is 52800 Feet or 10 miles (optional)
     * @param searchRadiusUnit Radius unit such as Feet, Kilometers, Miles or Meters  (optional)
     * @param travelTime Travel Time based on ‘travelMode’ within which demographics details are required. Max. value is 1 hour. (optional)
     * @param travelTimeUnit minutes,hours,seconds,milliseconds. Default is meters.Default is minutes. (optional)
     * @param travelDistance Travel Distance based on ‘travelMode’ within which demographics details are required. Max. value is 10 miles. (optional)
     * @param travelDistanceUnit feet,kilometers,miles,meters.  Default is feet. (optional)
     * @param travelMode Default is driving. (optional)
     * @param country 3 digit ISO country code (Used in case address is mentioned). (optional)
     * @param profile Applicable on ranged variables. Returns top sorted result based on the input value. (optional)
     * @param filter If Y, demographic boundaries are returned in response. (optional)
     * @param includeGeometry  (optional)
     * @return Demographics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Demographics getDemographicsBasic(String address, String longitude, String latitude, String searchRadius, String searchRadiusUnit, String travelTime, String travelTimeUnit, String travelDistance, String travelDistanceUnit, String travelMode, String country, String profile, String filter, String includeGeometry) throws ApiException {
        ApiResponse<Demographics> resp = getDemographicsBasicWithHttpInfo(address, longitude, latitude, searchRadius, searchRadiusUnit, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, travelMode, country, profile, filter, includeGeometry);
        return resp.getData();
    }

    /**
     * Demographics Basic
     * Demographics Basic Endpoint will return the aggregated values of the selected demographics variables of the regions falling inside the search radius. All the intersecting demographic boundaries will be snapped completely and user will have option to request these boundaries in response.  
     * @param address Address to be searched (optional)
     * @param longitude Longitude of the location (optional)
     * @param latitude Latitude of the location (optional)
     * @param searchRadius Radius within which demographics details are required. Max. value is 52800 Feet or 10 miles (optional)
     * @param searchRadiusUnit Radius unit such as Feet, Kilometers, Miles or Meters  (optional)
     * @param travelTime Travel Time based on ‘travelMode’ within which demographics details are required. Max. value is 1 hour. (optional)
     * @param travelTimeUnit minutes,hours,seconds,milliseconds. Default is meters.Default is minutes. (optional)
     * @param travelDistance Travel Distance based on ‘travelMode’ within which demographics details are required. Max. value is 10 miles. (optional)
     * @param travelDistanceUnit feet,kilometers,miles,meters.  Default is feet. (optional)
     * @param travelMode Default is driving. (optional)
     * @param country 3 digit ISO country code (Used in case address is mentioned). (optional)
     * @param profile Applicable on ranged variables. Returns top sorted result based on the input value. (optional)
     * @param filter If Y, demographic boundaries are returned in response. (optional)
     * @param includeGeometry  (optional)
     * @return ApiResponse&lt;Demographics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Demographics> getDemographicsBasicWithHttpInfo(String address, String longitude, String latitude, String searchRadius, String searchRadiusUnit, String travelTime, String travelTimeUnit, String travelDistance, String travelDistanceUnit, String travelMode, String country, String profile, String filter, String includeGeometry) throws ApiException {
        com.squareup.okhttp.Call call = getDemographicsBasicCall(address, longitude, latitude, searchRadius, searchRadiusUnit, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, travelMode, country, profile, filter, includeGeometry, null, null);
        Type localVarReturnType = new TypeToken<Demographics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Demographics Basic (asynchronously)
     * Demographics Basic Endpoint will return the aggregated values of the selected demographics variables of the regions falling inside the search radius. All the intersecting demographic boundaries will be snapped completely and user will have option to request these boundaries in response.  
     * @param address Address to be searched (optional)
     * @param longitude Longitude of the location (optional)
     * @param latitude Latitude of the location (optional)
     * @param searchRadius Radius within which demographics details are required. Max. value is 52800 Feet or 10 miles (optional)
     * @param searchRadiusUnit Radius unit such as Feet, Kilometers, Miles or Meters  (optional)
     * @param travelTime Travel Time based on ‘travelMode’ within which demographics details are required. Max. value is 1 hour. (optional)
     * @param travelTimeUnit minutes,hours,seconds,milliseconds. Default is meters.Default is minutes. (optional)
     * @param travelDistance Travel Distance based on ‘travelMode’ within which demographics details are required. Max. value is 10 miles. (optional)
     * @param travelDistanceUnit feet,kilometers,miles,meters.  Default is feet. (optional)
     * @param travelMode Default is driving. (optional)
     * @param country 3 digit ISO country code (Used in case address is mentioned). (optional)
     * @param profile Applicable on ranged variables. Returns top sorted result based on the input value. (optional)
     * @param filter If Y, demographic boundaries are returned in response. (optional)
     * @param includeGeometry  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDemographicsBasicAsync(String address, String longitude, String latitude, String searchRadius, String searchRadiusUnit, String travelTime, String travelTimeUnit, String travelDistance, String travelDistanceUnit, String travelMode, String country, String profile, String filter, String includeGeometry, final ApiCallback<Demographics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDemographicsBasicCall(address, longitude, latitude, searchRadius, searchRadiusUnit, travelTime, travelTimeUnit, travelDistance, travelDistanceUnit, travelMode, country, profile, filter, includeGeometry, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Demographics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getDemographicsByAddressV2 */
    private com.squareup.okhttp.Call getDemographicsByAddressV2Call(String address, String country, String profile, String filter, String valueFormat, String variableLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getDemographicsByAddressV2(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/demographics-segmentation/v1/demographics/byaddress".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (address != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "address", address));
        if (country != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "country", country));
        if (profile != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "profile", profile));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (valueFormat != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "valueFormat", valueFormat));
        if (variableLevel != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "variableLevel", variableLevel));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Demographics By Address.
     * Provides the demographic details around a specified address. GeoLife &#39;byaddress&#39; service accepts address as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
     * @param address The address to be searched. (required)
     * @param country 3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,AUS. (optional)
     * @param profile Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by address) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)
     * @param filter The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)
     * @param valueFormat The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)
     * @param variableLevel The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)
     * @return Demographics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Demographics getDemographicsByAddressV2(String address, String country, String profile, String filter, String valueFormat, String variableLevel) throws ApiException {
        ApiResponse<Demographics> resp = getDemographicsByAddressV2WithHttpInfo(address, country, profile, filter, valueFormat, variableLevel);
        return resp.getData();
    }

    /**
     * Demographics By Address.
     * Provides the demographic details around a specified address. GeoLife &#39;byaddress&#39; service accepts address as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
     * @param address The address to be searched. (required)
     * @param country 3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,AUS. (optional)
     * @param profile Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by address) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)
     * @param filter The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)
     * @param valueFormat The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)
     * @param variableLevel The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)
     * @return ApiResponse&lt;Demographics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Demographics> getDemographicsByAddressV2WithHttpInfo(String address, String country, String profile, String filter, String valueFormat, String variableLevel) throws ApiException {
        com.squareup.okhttp.Call call = getDemographicsByAddressV2Call(address, country, profile, filter, valueFormat, variableLevel, null, null);
        Type localVarReturnType = new TypeToken<Demographics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Demographics By Address. (asynchronously)
     * Provides the demographic details around a specified address. GeoLife &#39;byaddress&#39; service accepts address as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
     * @param address The address to be searched. (required)
     * @param country 3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,AUS. (optional)
     * @param profile Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by address) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)
     * @param filter The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)
     * @param valueFormat The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)
     * @param variableLevel The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDemographicsByAddressV2Async(String address, String country, String profile, String filter, String valueFormat, String variableLevel, final ApiCallback<Demographics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDemographicsByAddressV2Call(address, country, profile, filter, valueFormat, variableLevel, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Demographics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getDemographicsByBoundaryIds */
    private com.squareup.okhttp.Call getDemographicsByBoundaryIdsCall(String boundaryIds, String profile, String filter, String valueFormat, String variableLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/demographics-segmentation/v1/demographics/byboundaryids".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (boundaryIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "boundaryIds", boundaryIds));
        if (profile != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "profile", profile));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (valueFormat != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "valueFormat", valueFormat));
        if (variableLevel != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "variableLevel", variableLevel));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Demographics By Boundaryids.
     * This endpoint will allow the user to request demographics details by census boundary id. Multiple comma separated boundary ids will be accepted. 
     * @param boundaryIds Accepts comma separated multiple boundary ids. (optional)
     * @param profile Applicable on ranged variables. Returns top sorted result based on the input value. (optional)
     * @param filter Accept the comma separated theme names and filter response based on value. Maximum 10 can be provided. (optional)
     * @param valueFormat Applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional)
     * @param variableLevel Retrieves demographic facts in response based on the input value. (optional)
     * @return Demographics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Demographics getDemographicsByBoundaryIds(String boundaryIds, String profile, String filter, String valueFormat, String variableLevel) throws ApiException {
        ApiResponse<Demographics> resp = getDemographicsByBoundaryIdsWithHttpInfo(boundaryIds, profile, filter, valueFormat, variableLevel);
        return resp.getData();
    }

    /**
     * Demographics By Boundaryids.
     * This endpoint will allow the user to request demographics details by census boundary id. Multiple comma separated boundary ids will be accepted. 
     * @param boundaryIds Accepts comma separated multiple boundary ids. (optional)
     * @param profile Applicable on ranged variables. Returns top sorted result based on the input value. (optional)
     * @param filter Accept the comma separated theme names and filter response based on value. Maximum 10 can be provided. (optional)
     * @param valueFormat Applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional)
     * @param variableLevel Retrieves demographic facts in response based on the input value. (optional)
     * @return ApiResponse&lt;Demographics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Demographics> getDemographicsByBoundaryIdsWithHttpInfo(String boundaryIds, String profile, String filter, String valueFormat, String variableLevel) throws ApiException {
        com.squareup.okhttp.Call call = getDemographicsByBoundaryIdsCall(boundaryIds, profile, filter, valueFormat, variableLevel, null, null);
        Type localVarReturnType = new TypeToken<Demographics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Demographics By Boundaryids. (asynchronously)
     * This endpoint will allow the user to request demographics details by census boundary id. Multiple comma separated boundary ids will be accepted. 
     * @param boundaryIds Accepts comma separated multiple boundary ids. (optional)
     * @param profile Applicable on ranged variables. Returns top sorted result based on the input value. (optional)
     * @param filter Accept the comma separated theme names and filter response based on value. Maximum 10 can be provided. (optional)
     * @param valueFormat Applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional)
     * @param variableLevel Retrieves demographic facts in response based on the input value. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDemographicsByBoundaryIdsAsync(String boundaryIds, String profile, String filter, String valueFormat, String variableLevel, final ApiCallback<Demographics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDemographicsByBoundaryIdsCall(boundaryIds, profile, filter, valueFormat, variableLevel, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Demographics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getDemographicsByLocationV2 */
    private com.squareup.okhttp.Call getDemographicsByLocationV2Call(String longitude, String latitude, String profile, String filter, String valueFormat, String variableLevel, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'longitude' is set
        if (longitude == null) {
            throw new ApiException("Missing the required parameter 'longitude' when calling getDemographicsByLocationV2(Async)");
        }
        
        // verify the required parameter 'latitude' is set
        if (latitude == null) {
            throw new ApiException("Missing the required parameter 'latitude' when calling getDemographicsByLocationV2(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/demographics-segmentation/v1/demographics/bylocation".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (longitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "longitude", longitude));
        if (latitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "latitude", latitude));
        if (profile != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "profile", profile));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "filter", filter));
        if (valueFormat != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "valueFormat", valueFormat));
        if (variableLevel != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "variableLevel", variableLevel));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Demographics By Location.
     * Provides the demographic details around a specified location. GeoLife &#39;bylocation&#39; service accepts longitude and latitude as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
     * @param longitude Longitude of the location. (required)
     * @param latitude Latitude of the location. (required)
     * @param profile Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by location) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)
     * @param filter The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)
     * @param valueFormat The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)
     * @param variableLevel The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)
     * @return Demographics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Demographics getDemographicsByLocationV2(String longitude, String latitude, String profile, String filter, String valueFormat, String variableLevel) throws ApiException {
        ApiResponse<Demographics> resp = getDemographicsByLocationV2WithHttpInfo(longitude, latitude, profile, filter, valueFormat, variableLevel);
        return resp.getData();
    }

    /**
     * Demographics By Location.
     * Provides the demographic details around a specified location. GeoLife &#39;bylocation&#39; service accepts longitude and latitude as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
     * @param longitude Longitude of the location. (required)
     * @param latitude Latitude of the location. (required)
     * @param profile Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by location) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)
     * @param filter The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)
     * @param valueFormat The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)
     * @param variableLevel The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)
     * @return ApiResponse&lt;Demographics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Demographics> getDemographicsByLocationV2WithHttpInfo(String longitude, String latitude, String profile, String filter, String valueFormat, String variableLevel) throws ApiException {
        com.squareup.okhttp.Call call = getDemographicsByLocationV2Call(longitude, latitude, profile, filter, valueFormat, variableLevel, null, null);
        Type localVarReturnType = new TypeToken<Demographics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Demographics By Location. (asynchronously)
     * Provides the demographic details around a specified location. GeoLife &#39;bylocation&#39; service accepts longitude and latitude as an input to return a specific population segment&#39;s age group, ethnicity, income, purchasing behaviour, commuter patterns and more.
     * @param longitude Longitude of the location. (required)
     * @param latitude Latitude of the location. (required)
     * @param profile Retrieves the sorted demographic data on the basis of pre-defined profiles that can display the top 3 or top 5 results (by location) either in ascending or descending order.Allowed values Top5Ascending,Top5Descending,Top3Ascending,Top3Descending (optional)
     * @param filter The &#39;filter&#39; parameter retrieves the demographic data based upon specified input themes. (optional)
     * @param valueFormat The &#39;valueFormat&#39; parameter is applicable for few ranged variables where percent &amp; count both are available and filter response based on the input value. (optional, default to PercentAsAvailable)
     * @param variableLevel The &#39;variableLevel&#39; retrieves demographic facts in response based on the input value (optional, default to Key)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDemographicsByLocationV2Async(String longitude, String latitude, String profile, String filter, String valueFormat, String variableLevel, final ApiCallback<Demographics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDemographicsByLocationV2Call(longitude, latitude, profile, filter, valueFormat, variableLevel, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Demographics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getSegmentationByAddress */
    private com.squareup.okhttp.Call getSegmentationByAddressCall(String address, String country, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getSegmentationByAddress(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/demographics-segmentation/v1/segmentation/byaddress".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (address != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "address", address));
        if (country != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "country", country));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Segmentation By Address.
     * Provides the segmentation details around a specified address. GeoLife &#39;Segmentation by Address&#39; service accepts address as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
     * @param address The address to be searched. (required)
     * @param country 3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,FRA,ITA,AUS,DEU. (optional)
     * @return Segmentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Segmentation getSegmentationByAddress(String address, String country) throws ApiException {
        ApiResponse<Segmentation> resp = getSegmentationByAddressWithHttpInfo(address, country);
        return resp.getData();
    }

    /**
     * Segmentation By Address.
     * Provides the segmentation details around a specified address. GeoLife &#39;Segmentation by Address&#39; service accepts address as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
     * @param address The address to be searched. (required)
     * @param country 3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,FRA,ITA,AUS,DEU. (optional)
     * @return ApiResponse&lt;Segmentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Segmentation> getSegmentationByAddressWithHttpInfo(String address, String country) throws ApiException {
        com.squareup.okhttp.Call call = getSegmentationByAddressCall(address, country, null, null);
        Type localVarReturnType = new TypeToken<Segmentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Segmentation By Address. (asynchronously)
     * Provides the segmentation details around a specified address. GeoLife &#39;Segmentation by Address&#39; service accepts address as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
     * @param address The address to be searched. (required)
     * @param country 3 letter ISO code of the country to be searched.Allowed values USA,CAN,GBR,FRA,ITA,AUS,DEU. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSegmentationByAddressAsync(String address, String country, final ApiCallback<Segmentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSegmentationByAddressCall(address, country, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Segmentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getSegmentationByLocation */
    private com.squareup.okhttp.Call getSegmentationByLocationCall(String longitude, String latitude, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'longitude' is set
        if (longitude == null) {
            throw new ApiException("Missing the required parameter 'longitude' when calling getSegmentationByLocation(Async)");
        }
        
        // verify the required parameter 'latitude' is set
        if (latitude == null) {
            throw new ApiException("Missing the required parameter 'latitude' when calling getSegmentationByLocation(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/demographics-segmentation/v1/segmentation/bylocation".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (longitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "longitude", longitude));
        if (latitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "latitude", latitude));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Segmentation By Location.
     * Provides the segmentation details around a specified location. GeoLife &#39;segmentation bylocation&#39; service accepts longitude and latitude as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
     * @param longitude Longitude of the location. (required)
     * @param latitude Latitude of the location. (required)
     * @return Segmentation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Segmentation getSegmentationByLocation(String longitude, String latitude) throws ApiException {
        ApiResponse<Segmentation> resp = getSegmentationByLocationWithHttpInfo(longitude, latitude);
        return resp.getData();
    }

    /**
     * Segmentation By Location.
     * Provides the segmentation details around a specified location. GeoLife &#39;segmentation bylocation&#39; service accepts longitude and latitude as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
     * @param longitude Longitude of the location. (required)
     * @param latitude Latitude of the location. (required)
     * @return ApiResponse&lt;Segmentation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Segmentation> getSegmentationByLocationWithHttpInfo(String longitude, String latitude) throws ApiException {
        com.squareup.okhttp.Call call = getSegmentationByLocationCall(longitude, latitude, null, null);
        Type localVarReturnType = new TypeToken<Segmentation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Segmentation By Location. (asynchronously)
     * Provides the segmentation details around a specified location. GeoLife &#39;segmentation bylocation&#39; service accepts longitude and latitude as an input to return the lifestyle characteristics of households in terms of their family status, children characteristics, income behaviors, financial preferences and interests.
     * @param longitude Longitude of the location. (required)
     * @param latitude Latitude of the location. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSegmentationByLocationAsync(String longitude, String latitude, final ApiCallback<Segmentation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSegmentationByLocationCall(longitude, latitude, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Segmentation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
