/**
 * Precisely APIs
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * OpenAPI spec version: 10.5.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.precisely.apis;

import com.precisely.ApiCallback;
import com.precisely.ApiClient;
import com.precisely.ApiException;
import com.precisely.ApiResponse;
import com.precisely.Configuration;
import com.precisely.Pair;
import com.precisely.ProgressRequestBody;
import com.precisely.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.precisely.apis.model.GeoPropertyResponse;
import com.precisely.apis.model.GeoPropertyAddressRequest;
import com.precisely.apis.model.GeoPropertyResponses;
import com.precisely.apis.model.ParcelBoundary;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PropertyInformationServiceApi {
    private ApiClient apiClient;

    public PropertyInformationServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PropertyInformationServiceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getGeoPropertyByAddress */
    private com.squareup.okhttp.Call getGeoPropertyByAddressCall(String address, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getGeoPropertyByAddress(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/property/v1/all/attributes/byaddress".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (address != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "address", address));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get Property Attributes By Address
     * Accepts address as input and returns property attributes for the matched address.
     * @param address free form address text (required)
     * @return GeoPropertyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GeoPropertyResponse getGeoPropertyByAddress(String address) throws ApiException {
        ApiResponse<GeoPropertyResponse> resp = getGeoPropertyByAddressWithHttpInfo(address);
        return resp.getData();
    }

    /**
     * Get Property Attributes By Address
     * Accepts address as input and returns property attributes for the matched address.
     * @param address free form address text (required)
     * @return ApiResponse&lt;GeoPropertyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GeoPropertyResponse> getGeoPropertyByAddressWithHttpInfo(String address) throws ApiException {
        com.squareup.okhttp.Call call = getGeoPropertyByAddressCall(address, null, null);
        Type localVarReturnType = new TypeToken<GeoPropertyResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Property Attributes By Address (asynchronously)
     * Accepts address as input and returns property attributes for the matched address.
     * @param address free form address text (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGeoPropertyByAddressAsync(String address, final ApiCallback<GeoPropertyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGeoPropertyByAddressCall(address, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GeoPropertyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getGeoPropertyByAddressBatch */
    private com.squareup.okhttp.Call getGeoPropertyByAddressBatchCall(GeoPropertyAddressRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        

        // create path and map variables
        String localVarPath = "/property/v1/all/attributes/byaddress".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Post Property Attributes By Address
     * This is a Batch offering for &#39;Property Attributes By Address&#39; service. It accepts a single address or a list of addresses and returns property attributes for the matched address.
     * @param body  (optional)
     * @return GeoPropertyResponses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GeoPropertyResponses getGeoPropertyByAddressBatch(GeoPropertyAddressRequest body) throws ApiException {
        ApiResponse<GeoPropertyResponses> resp = getGeoPropertyByAddressBatchWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Post Property Attributes By Address
     * This is a Batch offering for &#39;Property Attributes By Address&#39; service. It accepts a single address or a list of addresses and returns property attributes for the matched address.
     * @param body  (optional)
     * @return ApiResponse&lt;GeoPropertyResponses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GeoPropertyResponses> getGeoPropertyByAddressBatchWithHttpInfo(GeoPropertyAddressRequest body) throws ApiException {
        com.squareup.okhttp.Call call = getGeoPropertyByAddressBatchCall(body, null, null);
        Type localVarReturnType = new TypeToken<GeoPropertyResponses>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Post Property Attributes By Address (asynchronously)
     * This is a Batch offering for &#39;Property Attributes By Address&#39; service. It accepts a single address or a list of addresses and returns property attributes for the matched address.
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGeoPropertyByAddressBatchAsync(GeoPropertyAddressRequest body, final ApiCallback<GeoPropertyResponses> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGeoPropertyByAddressBatchCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GeoPropertyResponses>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getParcelBoundaryByAddress */
    private com.squareup.okhttp.Call getParcelBoundaryByAddressCall(String address, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getParcelBoundaryByAddress(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/property/v1/parcelboundary/byaddress".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (address != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "address", address));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get Parcel Boundary By Address
     * Accepts address as input and returns property parcel boundary around that address.
     * @param address free form address text (required)
     * @param accept  (optional)
     * @return ParcelBoundary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ParcelBoundary getParcelBoundaryByAddress(String address, String accept) throws ApiException {
        ApiResponse<ParcelBoundary> resp = getParcelBoundaryByAddressWithHttpInfo(address, accept);
        return resp.getData();
    }

    /**
     * Get Parcel Boundary By Address
     * Accepts address as input and returns property parcel boundary around that address.
     * @param address free form address text (required)
     * @param accept  (optional)
     * @return ApiResponse&lt;ParcelBoundary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ParcelBoundary> getParcelBoundaryByAddressWithHttpInfo(String address, String accept) throws ApiException {
        com.squareup.okhttp.Call call = getParcelBoundaryByAddressCall(address, accept, null, null);
        Type localVarReturnType = new TypeToken<ParcelBoundary>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Parcel Boundary By Address (asynchronously)
     * Accepts address as input and returns property parcel boundary around that address.
     * @param address free form address text (required)
     * @param accept  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getParcelBoundaryByAddressAsync(String address, String accept, final ApiCallback<ParcelBoundary> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getParcelBoundaryByAddressCall(address, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ParcelBoundary>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getParcelBoundaryByLocation */
    private com.squareup.okhttp.Call getParcelBoundaryByLocationCall(String longitude, String latitude, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'longitude' is set
        if (longitude == null) {
            throw new ApiException("Missing the required parameter 'longitude' when calling getParcelBoundaryByLocation(Async)");
        }
        
        // verify the required parameter 'latitude' is set
        if (latitude == null) {
            throw new ApiException("Missing the required parameter 'latitude' when calling getParcelBoundaryByLocation(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/property/v1/parcelboundary/bylocation".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (longitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "longitude", longitude));
        if (latitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "latitude", latitude));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get Parcel Boundary By Location
     * Accepts latitude/longitude as input and returns property parcel boundary around that location.
     * @param longitude Longitude of Location (required)
     * @param latitude Latitude of Location (required)
     * @param accept  (optional)
     * @return ParcelBoundary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ParcelBoundary getParcelBoundaryByLocation(String longitude, String latitude, String accept) throws ApiException {
        ApiResponse<ParcelBoundary> resp = getParcelBoundaryByLocationWithHttpInfo(longitude, latitude, accept);
        return resp.getData();
    }

    /**
     * Get Parcel Boundary By Location
     * Accepts latitude/longitude as input and returns property parcel boundary around that location.
     * @param longitude Longitude of Location (required)
     * @param latitude Latitude of Location (required)
     * @param accept  (optional)
     * @return ApiResponse&lt;ParcelBoundary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ParcelBoundary> getParcelBoundaryByLocationWithHttpInfo(String longitude, String latitude, String accept) throws ApiException {
        com.squareup.okhttp.Call call = getParcelBoundaryByLocationCall(longitude, latitude, accept, null, null);
        Type localVarReturnType = new TypeToken<ParcelBoundary>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Parcel Boundary By Location (asynchronously)
     * Accepts latitude/longitude as input and returns property parcel boundary around that location.
     * @param longitude Longitude of Location (required)
     * @param latitude Latitude of Location (required)
     * @param accept  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getParcelBoundaryByLocationAsync(String longitude, String latitude, String accept, final ApiCallback<ParcelBoundary> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getParcelBoundaryByLocationCall(longitude, latitude, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ParcelBoundary>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
