/**
 * Precisely APIs
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * OpenAPI spec version: 11.6.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.precisely.apis;

import com.precisely.ApiCallback;
import com.precisely.ApiClient;
import com.precisely.ApiException;
import com.precisely.ApiResponse;
import com.precisely.Configuration;
import com.precisely.Pair;
import com.precisely.ProgressRequestBody;
import com.precisely.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.precisely.apis.model.ParcelBoundary;
import com.precisely.apis.model.PropertyInfoResponse;
import com.precisely.apis.model.ErrorInfo;
import com.precisely.apis.model.PropertyInfoResponses;
import com.precisely.apis.model.PropertyInfoAddressRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PropertyInformationServiceApi {
    private ApiClient apiClient;

    public PropertyInformationServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PropertyInformationServiceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getParcelBoundaryByAddress */
    private com.squareup.okhttp.Call getParcelBoundaryByAddressCall(String address, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getParcelBoundaryByAddress(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/property/v1/parcelboundary/byaddress".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (address != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "address", address));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get Parcel Boundary By Address
     * Accepts address as input and returns property parcel boundary around that address.
     * @param address free form address text (required)
     * @param accept  (optional)
     * @return ParcelBoundary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ParcelBoundary getParcelBoundaryByAddress(String address, String accept) throws ApiException {
        ApiResponse<ParcelBoundary> resp = getParcelBoundaryByAddressWithHttpInfo(address, accept);
        return resp.getData();
    }

    /**
     * Get Parcel Boundary By Address
     * Accepts address as input and returns property parcel boundary around that address.
     * @param address free form address text (required)
     * @param accept  (optional)
     * @return ApiResponse&lt;ParcelBoundary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ParcelBoundary> getParcelBoundaryByAddressWithHttpInfo(String address, String accept) throws ApiException {
        com.squareup.okhttp.Call call = getParcelBoundaryByAddressCall(address, accept, null, null);
        Type localVarReturnType = new TypeToken<ParcelBoundary>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Parcel Boundary By Address (asynchronously)
     * Accepts address as input and returns property parcel boundary around that address.
     * @param address free form address text (required)
     * @param accept  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getParcelBoundaryByAddressAsync(String address, String accept, final ApiCallback<ParcelBoundary> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getParcelBoundaryByAddressCall(address, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ParcelBoundary>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getParcelBoundaryByLocation */
    private com.squareup.okhttp.Call getParcelBoundaryByLocationCall(String longitude, String latitude, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'longitude' is set
        if (longitude == null) {
            throw new ApiException("Missing the required parameter 'longitude' when calling getParcelBoundaryByLocation(Async)");
        }
        
        // verify the required parameter 'latitude' is set
        if (latitude == null) {
            throw new ApiException("Missing the required parameter 'latitude' when calling getParcelBoundaryByLocation(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/property/v1/parcelboundary/bylocation".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (longitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "longitude", longitude));
        if (latitude != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "latitude", latitude));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get Parcel Boundary By Location
     * Accepts latitude/longitude as input and returns property parcel boundary around that location.
     * @param longitude Longitude of Location (required)
     * @param latitude Latitude of Location (required)
     * @param accept  (optional)
     * @return ParcelBoundary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ParcelBoundary getParcelBoundaryByLocation(String longitude, String latitude, String accept) throws ApiException {
        ApiResponse<ParcelBoundary> resp = getParcelBoundaryByLocationWithHttpInfo(longitude, latitude, accept);
        return resp.getData();
    }

    /**
     * Get Parcel Boundary By Location
     * Accepts latitude/longitude as input and returns property parcel boundary around that location.
     * @param longitude Longitude of Location (required)
     * @param latitude Latitude of Location (required)
     * @param accept  (optional)
     * @return ApiResponse&lt;ParcelBoundary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ParcelBoundary> getParcelBoundaryByLocationWithHttpInfo(String longitude, String latitude, String accept) throws ApiException {
        com.squareup.okhttp.Call call = getParcelBoundaryByLocationCall(longitude, latitude, accept, null, null);
        Type localVarReturnType = new TypeToken<ParcelBoundary>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Parcel Boundary By Location (asynchronously)
     * Accepts latitude/longitude as input and returns property parcel boundary around that location.
     * @param longitude Longitude of Location (required)
     * @param latitude Latitude of Location (required)
     * @param accept  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getParcelBoundaryByLocationAsync(String longitude, String latitude, String accept, final ApiCallback<ParcelBoundary> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getParcelBoundaryByLocationCall(longitude, latitude, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ParcelBoundary>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getPropertyAttributesByAddress */
    private com.squareup.okhttp.Call getPropertyAttributesByAddressCall(String address, String attributeFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/property/v2/attributes/byaddress".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (address != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "address", address));
        if (attributeFilter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "attributeFilter", attributeFilter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * PropertyV2 Attributes By Address.
     * GetPropertyAttributesbyAddress Endpoint will take address as an input and will return key property attributes in response. Optionally user will have the option to filter the attributes and will pay for only returned attributes.
     * @param address free form address text (optional)
     * @param attributeFilter Case-insensitive comma separated values of property attributes. Response will contain only the input attributes. (optional)
     * @return PropertyInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PropertyInfoResponse getPropertyAttributesByAddress(String address, String attributeFilter) throws ApiException {
        ApiResponse<PropertyInfoResponse> resp = getPropertyAttributesByAddressWithHttpInfo(address, attributeFilter);
        return resp.getData();
    }

    /**
     * PropertyV2 Attributes By Address.
     * GetPropertyAttributesbyAddress Endpoint will take address as an input and will return key property attributes in response. Optionally user will have the option to filter the attributes and will pay for only returned attributes.
     * @param address free form address text (optional)
     * @param attributeFilter Case-insensitive comma separated values of property attributes. Response will contain only the input attributes. (optional)
     * @return ApiResponse&lt;PropertyInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PropertyInfoResponse> getPropertyAttributesByAddressWithHttpInfo(String address, String attributeFilter) throws ApiException {
        com.squareup.okhttp.Call call = getPropertyAttributesByAddressCall(address, attributeFilter, null, null);
        Type localVarReturnType = new TypeToken<PropertyInfoResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * PropertyV2 Attributes By Address. (asynchronously)
     * GetPropertyAttributesbyAddress Endpoint will take address as an input and will return key property attributes in response. Optionally user will have the option to filter the attributes and will pay for only returned attributes.
     * @param address free form address text (optional)
     * @param attributeFilter Case-insensitive comma separated values of property attributes. Response will contain only the input attributes. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPropertyAttributesByAddressAsync(String address, String attributeFilter, final ApiCallback<PropertyInfoResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPropertyAttributesByAddressCall(address, attributeFilter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PropertyInfoResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getPropertyAttributesByAddressBatch */
    private com.squareup.okhttp.Call getPropertyAttributesByAddressBatchCall(PropertyInfoAddressRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        

        // create path and map variables
        String localVarPath = "/property/v2/attributes/byaddress".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * PropertyV2 Attributes By Address Batch.
     * GetPropertyAttributesbyAddressBatch Endpoint will take the list of addresses as an input and will return key property attributes for the given addresses in response. Optionally user will have the option to filter the attributes and will pay for only returned attributes.
     * @param body  (optional)
     * @return PropertyInfoResponses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PropertyInfoResponses getPropertyAttributesByAddressBatch(PropertyInfoAddressRequest body) throws ApiException {
        ApiResponse<PropertyInfoResponses> resp = getPropertyAttributesByAddressBatchWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * PropertyV2 Attributes By Address Batch.
     * GetPropertyAttributesbyAddressBatch Endpoint will take the list of addresses as an input and will return key property attributes for the given addresses in response. Optionally user will have the option to filter the attributes and will pay for only returned attributes.
     * @param body  (optional)
     * @return ApiResponse&lt;PropertyInfoResponses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PropertyInfoResponses> getPropertyAttributesByAddressBatchWithHttpInfo(PropertyInfoAddressRequest body) throws ApiException {
        com.squareup.okhttp.Call call = getPropertyAttributesByAddressBatchCall(body, null, null);
        Type localVarReturnType = new TypeToken<PropertyInfoResponses>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * PropertyV2 Attributes By Address Batch. (asynchronously)
     * GetPropertyAttributesbyAddressBatch Endpoint will take the list of addresses as an input and will return key property attributes for the given addresses in response. Optionally user will have the option to filter the attributes and will pay for only returned attributes.
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPropertyAttributesByAddressBatchAsync(PropertyInfoAddressRequest body, final ApiCallback<PropertyInfoResponses> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPropertyAttributesByAddressBatchCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PropertyInfoResponses>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
