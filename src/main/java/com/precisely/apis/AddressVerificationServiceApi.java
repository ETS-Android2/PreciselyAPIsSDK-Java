/**
 * Precisely APIs
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * OpenAPI spec version: 9.5.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.precisely.apis;

import com.precisely.ApiCallback;
import com.precisely.ApiClient;
import com.precisely.ApiException;
import com.precisely.ApiResponse;
import com.precisely.Configuration;
import com.precisely.Pair;
import com.precisely.ProgressRequestBody;
import com.precisely.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.precisely.apis.model.GetCityStateProvinceAPIRequest;
import com.precisely.apis.model.GetCityStateProvinceAPIResponse;
import com.precisely.apis.model.GetPostalCodesAPIRequest;
import com.precisely.apis.model.GetPostalCodesAPIResponse;
import com.precisely.apis.model.ValidateMailingAddressRequest;
import com.precisely.apis.model.ValidateMailingAddressResponse;
import com.precisely.apis.model.ValidateMailingAddressPremiumRequest;
import com.precisely.apis.model.ValidateMailingAddressPremiumResponse;
import com.precisely.apis.model.ValidateMailingAddressProRequest;
import com.precisely.apis.model.ValidateMailingAddressProResponse;
import com.precisely.apis.model.ValidateMailingAddressUSCANAPIRequest;
import com.precisely.apis.model.ValidateMailingAddressUSCANAPIResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AddressVerificationServiceApi {
    private ApiClient apiClient;

    public AddressVerificationServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AddressVerificationServiceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getCityStateProvince */
    private com.squareup.okhttp.Call getCityStateProvinceCall(GetCityStateProvinceAPIRequest inputAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = inputAddress;
        
        // verify the required parameter 'inputAddress' is set
        if (inputAddress == null) {
            throw new ApiException("Missing the required parameter 'inputAddress' when calling getCityStateProvince(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/addressverification/v1/getcitystateprovince/results.json".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * GetCityStateProvince
     * GetCityStateProvince returns a city and state/province for a given input postal code for U.S. and Canadian addresses.
     * @param inputAddress  (required)
     * @return GetCityStateProvinceAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetCityStateProvinceAPIResponse getCityStateProvince(GetCityStateProvinceAPIRequest inputAddress) throws ApiException {
        ApiResponse<GetCityStateProvinceAPIResponse> resp = getCityStateProvinceWithHttpInfo(inputAddress);
        return resp.getData();
    }

    /**
     * GetCityStateProvince
     * GetCityStateProvince returns a city and state/province for a given input postal code for U.S. and Canadian addresses.
     * @param inputAddress  (required)
     * @return ApiResponse&lt;GetCityStateProvinceAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetCityStateProvinceAPIResponse> getCityStateProvinceWithHttpInfo(GetCityStateProvinceAPIRequest inputAddress) throws ApiException {
        com.squareup.okhttp.Call call = getCityStateProvinceCall(inputAddress, null, null);
        Type localVarReturnType = new TypeToken<GetCityStateProvinceAPIResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * GetCityStateProvince (asynchronously)
     * GetCityStateProvince returns a city and state/province for a given input postal code for U.S. and Canadian addresses.
     * @param inputAddress  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCityStateProvinceAsync(GetCityStateProvinceAPIRequest inputAddress, final ApiCallback<GetCityStateProvinceAPIResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCityStateProvinceCall(inputAddress, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetCityStateProvinceAPIResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getPostalCodes */
    private com.squareup.okhttp.Call getPostalCodesCall(GetPostalCodesAPIRequest inputAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = inputAddress;
        
        // verify the required parameter 'inputAddress' is set
        if (inputAddress == null) {
            throw new ApiException("Missing the required parameter 'inputAddress' when calling getPostalCodes(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/addressverification/v1/getpostalcodes/results.json".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * GetPostalCodes
     * GetPostalCodes takes a city and state as input for U.S. addresses and returns the postal codes for that city.
     * @param inputAddress  (required)
     * @return GetPostalCodesAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetPostalCodesAPIResponse getPostalCodes(GetPostalCodesAPIRequest inputAddress) throws ApiException {
        ApiResponse<GetPostalCodesAPIResponse> resp = getPostalCodesWithHttpInfo(inputAddress);
        return resp.getData();
    }

    /**
     * GetPostalCodes
     * GetPostalCodes takes a city and state as input for U.S. addresses and returns the postal codes for that city.
     * @param inputAddress  (required)
     * @return ApiResponse&lt;GetPostalCodesAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetPostalCodesAPIResponse> getPostalCodesWithHttpInfo(GetPostalCodesAPIRequest inputAddress) throws ApiException {
        com.squareup.okhttp.Call call = getPostalCodesCall(inputAddress, null, null);
        Type localVarReturnType = new TypeToken<GetPostalCodesAPIResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * GetPostalCodes (asynchronously)
     * GetPostalCodes takes a city and state as input for U.S. addresses and returns the postal codes for that city.
     * @param inputAddress  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPostalCodesAsync(GetPostalCodesAPIRequest inputAddress, final ApiCallback<GetPostalCodesAPIResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPostalCodesCall(inputAddress, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetPostalCodesAPIResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for validateMailingAddress */
    private com.squareup.okhttp.Call validateMailingAddressCall(ValidateMailingAddressRequest inputAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = inputAddress;
        
        // verify the required parameter 'inputAddress' is set
        if (inputAddress == null) {
            throw new ApiException("Missing the required parameter 'inputAddress' when calling validateMailingAddress(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/addressverification/v1/validatemailingaddress/results.json".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * ValidateMailingAddress
     * ValidateMailingAddress analyses and compares the input addresses against the known address databases around the world to output a standardized detail.
     * @param inputAddress  (required)
     * @return ValidateMailingAddressResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidateMailingAddressResponse validateMailingAddress(ValidateMailingAddressRequest inputAddress) throws ApiException {
        ApiResponse<ValidateMailingAddressResponse> resp = validateMailingAddressWithHttpInfo(inputAddress);
        return resp.getData();
    }

    /**
     * ValidateMailingAddress
     * ValidateMailingAddress analyses and compares the input addresses against the known address databases around the world to output a standardized detail.
     * @param inputAddress  (required)
     * @return ApiResponse&lt;ValidateMailingAddressResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidateMailingAddressResponse> validateMailingAddressWithHttpInfo(ValidateMailingAddressRequest inputAddress) throws ApiException {
        com.squareup.okhttp.Call call = validateMailingAddressCall(inputAddress, null, null);
        Type localVarReturnType = new TypeToken<ValidateMailingAddressResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * ValidateMailingAddress (asynchronously)
     * ValidateMailingAddress analyses and compares the input addresses against the known address databases around the world to output a standardized detail.
     * @param inputAddress  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call validateMailingAddressAsync(ValidateMailingAddressRequest inputAddress, final ApiCallback<ValidateMailingAddressResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = validateMailingAddressCall(inputAddress, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ValidateMailingAddressResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for validateMailingAddressPremium */
    private com.squareup.okhttp.Call validateMailingAddressPremiumCall(ValidateMailingAddressPremiumRequest inputAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = inputAddress;
        
        // verify the required parameter 'inputAddress' is set
        if (inputAddress == null) {
            throw new ApiException("Missing the required parameter 'inputAddress' when calling validateMailingAddressPremium(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/addressverification/v1/validatemailingaddresspremium/results.json".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * ValidateMailingAddressPremium
     * ValidateMailing AddressPremium expands on the ValidateMailingAddressPro service by adding premium address data sources to get the best address validation result possible.
     * @param inputAddress  (required)
     * @return ValidateMailingAddressPremiumResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidateMailingAddressPremiumResponse validateMailingAddressPremium(ValidateMailingAddressPremiumRequest inputAddress) throws ApiException {
        ApiResponse<ValidateMailingAddressPremiumResponse> resp = validateMailingAddressPremiumWithHttpInfo(inputAddress);
        return resp.getData();
    }

    /**
     * ValidateMailingAddressPremium
     * ValidateMailing AddressPremium expands on the ValidateMailingAddressPro service by adding premium address data sources to get the best address validation result possible.
     * @param inputAddress  (required)
     * @return ApiResponse&lt;ValidateMailingAddressPremiumResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidateMailingAddressPremiumResponse> validateMailingAddressPremiumWithHttpInfo(ValidateMailingAddressPremiumRequest inputAddress) throws ApiException {
        com.squareup.okhttp.Call call = validateMailingAddressPremiumCall(inputAddress, null, null);
        Type localVarReturnType = new TypeToken<ValidateMailingAddressPremiumResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * ValidateMailingAddressPremium (asynchronously)
     * ValidateMailing AddressPremium expands on the ValidateMailingAddressPro service by adding premium address data sources to get the best address validation result possible.
     * @param inputAddress  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call validateMailingAddressPremiumAsync(ValidateMailingAddressPremiumRequest inputAddress, final ApiCallback<ValidateMailingAddressPremiumResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = validateMailingAddressPremiumCall(inputAddress, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ValidateMailingAddressPremiumResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for validateMailingAddressPro */
    private com.squareup.okhttp.Call validateMailingAddressProCall(ValidateMailingAddressProRequest inputAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = inputAddress;
        
        // verify the required parameter 'inputAddress' is set
        if (inputAddress == null) {
            throw new ApiException("Missing the required parameter 'inputAddress' when calling validateMailingAddressPro(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/addressverification/v1/validatemailingaddresspro/results.json".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * ValidateMailingAddressPro
     * ValidateMailingAddressPro builds upon the ValidateMailingAddress service by using additional address databases so it can provide enhanced detail.
     * @param inputAddress  (required)
     * @return ValidateMailingAddressProResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidateMailingAddressProResponse validateMailingAddressPro(ValidateMailingAddressProRequest inputAddress) throws ApiException {
        ApiResponse<ValidateMailingAddressProResponse> resp = validateMailingAddressProWithHttpInfo(inputAddress);
        return resp.getData();
    }

    /**
     * ValidateMailingAddressPro
     * ValidateMailingAddressPro builds upon the ValidateMailingAddress service by using additional address databases so it can provide enhanced detail.
     * @param inputAddress  (required)
     * @return ApiResponse&lt;ValidateMailingAddressProResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidateMailingAddressProResponse> validateMailingAddressProWithHttpInfo(ValidateMailingAddressProRequest inputAddress) throws ApiException {
        com.squareup.okhttp.Call call = validateMailingAddressProCall(inputAddress, null, null);
        Type localVarReturnType = new TypeToken<ValidateMailingAddressProResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * ValidateMailingAddressPro (asynchronously)
     * ValidateMailingAddressPro builds upon the ValidateMailingAddress service by using additional address databases so it can provide enhanced detail.
     * @param inputAddress  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call validateMailingAddressProAsync(ValidateMailingAddressProRequest inputAddress, final ApiCallback<ValidateMailingAddressProResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = validateMailingAddressProCall(inputAddress, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ValidateMailingAddressProResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for validateMailingAddressUSCAN */
    private com.squareup.okhttp.Call validateMailingAddressUSCANCall(ValidateMailingAddressUSCANAPIRequest inputAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = inputAddress;
        
        // verify the required parameter 'inputAddress' is set
        if (inputAddress == null) {
            throw new ApiException("Missing the required parameter 'inputAddress' when calling validateMailingAddressUSCAN(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/addressverification/v1/validatemailingaddressuscan/results.json".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "oAuth2Password" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * ValidateMailingAddressUSCAN
     * ValidateMailingAddressUSCAN analyses and compares the input addresses against the known address databases around the world to output a standardized detail for US and CANADAIt gives RDI and DPV also along with other US/CAN specific functionalities.
     * @param inputAddress  (required)
     * @return ValidateMailingAddressUSCANAPIResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidateMailingAddressUSCANAPIResponse validateMailingAddressUSCAN(ValidateMailingAddressUSCANAPIRequest inputAddress) throws ApiException {
        ApiResponse<ValidateMailingAddressUSCANAPIResponse> resp = validateMailingAddressUSCANWithHttpInfo(inputAddress);
        return resp.getData();
    }

    /**
     * ValidateMailingAddressUSCAN
     * ValidateMailingAddressUSCAN analyses and compares the input addresses against the known address databases around the world to output a standardized detail for US and CANADAIt gives RDI and DPV also along with other US/CAN specific functionalities.
     * @param inputAddress  (required)
     * @return ApiResponse&lt;ValidateMailingAddressUSCANAPIResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidateMailingAddressUSCANAPIResponse> validateMailingAddressUSCANWithHttpInfo(ValidateMailingAddressUSCANAPIRequest inputAddress) throws ApiException {
        com.squareup.okhttp.Call call = validateMailingAddressUSCANCall(inputAddress, null, null);
        Type localVarReturnType = new TypeToken<ValidateMailingAddressUSCANAPIResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * ValidateMailingAddressUSCAN (asynchronously)
     * ValidateMailingAddressUSCAN analyses and compares the input addresses against the known address databases around the world to output a standardized detail for US and CANADAIt gives RDI and DPV also along with other US/CAN specific functionalities.
     * @param inputAddress  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call validateMailingAddressUSCANAsync(ValidateMailingAddressUSCANAPIRequest inputAddress, final ApiCallback<ValidateMailingAddressUSCANAPIResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = validateMailingAddressUSCANCall(inputAddress, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ValidateMailingAddressUSCANAPIResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
