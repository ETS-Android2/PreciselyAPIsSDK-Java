/**
 * Precisely APIs
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * OpenAPI spec version: 11.7.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.precisely.apis;

import com.precisely.ApiException;
import com.precisely.apis.model.GeoLocationIpAddr;
import com.precisely.apis.model.GeoLocationAccessPoint;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GeolocationServiceApi
 */
public class GeolocationServiceApiTest {

    private final GeolocationServiceApi api = new GeolocationServiceApi();

    
    /**
     * Location By IP Address.
     *
     * This service accepts an IP address and returns the location coordinates corresponding to that IP address.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLocationByIPAddressTest() throws ApiException {
        String ipAddress = null;
        // GeoLocationIpAddr response = api.getLocationByIPAddress(ipAddress);

        // TODO: test validations
    }
    
    /**
     * Location by WiFi Access Point.
     *
     * This service accepts a WiFi access point MAC address and returns the location coordinates corresponding to that access point. Only mac or accessPoint are mandatory parameters (one of them has to be provided), rest are optional.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLocationByWiFiAccessPointTest() throws ApiException {
        String mac = null;
        String ssid = null;
        String rsid = null;
        String speed = null;
        String accessPoint = null;
        // GeoLocationAccessPoint response = api.getLocationByWiFiAccessPoint(mac, ssid, rsid, speed, accessPoint);

        // TODO: test validations
    }
    
}
