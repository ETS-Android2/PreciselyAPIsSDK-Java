/**
 * Precisely APIs
 * Enhance & enrich your data, applications, business processes, and workflows with rich location, information, and identify APIs.
 *
 * OpenAPI spec version: 11.5.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.precisely.apis;

import com.precisely.ApiException;
import com.precisely.apis.model.ParcelBoundary;
import com.precisely.apis.model.PropertyInfoResponse;
import com.precisely.apis.model.ErrorInfo;
import com.precisely.apis.model.PropertyInfoResponses;
import com.precisely.apis.model.PropertyInfoAddressRequest;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PropertyInformationServiceApi
 */
public class PropertyInformationServiceApiTest {

    private final PropertyInformationServiceApi api = new PropertyInformationServiceApi();

    
    /**
     * Get Parcel Boundary By Address
     *
     * Accepts address as input and returns property parcel boundary around that address.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParcelBoundaryByAddressTest() throws ApiException {
        String address = null;
        String accept = null;
        // ParcelBoundary response = api.getParcelBoundaryByAddress(address, accept);

        // TODO: test validations
    }
    
    /**
     * Get Parcel Boundary By Location
     *
     * Accepts latitude/longitude as input and returns property parcel boundary around that location.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParcelBoundaryByLocationTest() throws ApiException {
        String longitude = null;
        String latitude = null;
        String accept = null;
        // ParcelBoundary response = api.getParcelBoundaryByLocation(longitude, latitude, accept);

        // TODO: test validations
    }
    
    /**
     * PropertyV2 Attributes By Address.
     *
     * GetPropertyAttributesbyAddress Endpoint will take address as an input and will return key property attributes in response. Optionally user will have the option to filter the attributes and will pay for only returned attributes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPropertyAttributesByAddressTest() throws ApiException {
        String address = null;
        String attributeFilter = null;
        // PropertyInfoResponse response = api.getPropertyAttributesByAddress(address, attributeFilter);

        // TODO: test validations
    }
    
    /**
     * PropertyV2 Attributes By Address Batch.
     *
     * GetPropertyAttributesbyAddressBatch Endpoint will take the list of addresses as an input and will return key property attributes for the given addresses in response. Optionally user will have the option to filter the attributes and will pay for only returned attributes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPropertyAttributesByAddressBatchTest() throws ApiException {
        PropertyInfoAddressRequest body = null;
        // PropertyInfoResponses response = api.getPropertyAttributesByAddressBatch(body);

        // TODO: test validations
    }
    
}
